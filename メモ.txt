ふ# Next.js&Reactメモ

参考

https://zenn.dev/sikkim/books/how_to_create_api_sales_service/viewer/1_front_end_environment

■プロジェクト作成

- react

npm create vite@latest

npm install

- Next.js

npx create-next-app@latest プロジェクト名

■サーバー起動

npm run dev

■tailwindcss

npm i -D tailwindcss postcss autoprefixer

よく使うクラス

https://zenn.dev/yohei_watanabe/books/c0b573713734b9/viewer/cfd413

■デバック設定

https://qiita.com/fsd_maclala/items/5878af09e70258fa2e68

■Next.js初学者

https://qiita.com/yu-Matsu/items/4ebd28d5ecf2fd8acf98

■**Azure Cosmos DB**

node.js⇒cosmosdbへのアクセス方法が載って

https://qiita.com/ymasaoka/items/3784c64baf30bbe7b761

マニュアル

https://learn.microsoft.com/ja-jp/azure/cosmos-db/nosql/quickstart-nodejs?pivots=devcontainer-codespace#get-a-container

DB更新のサンプルコード

https://miyohide.hatenablog.com/entry/2020/09/06/182831

https://learn.microsoft.com/ja-jp/azure/cosmos-db/nosql/samples-nodejs

・cosmosdb利用にあたりNode.js + Express.js + TypeScriptの準備

https://qiita.com/ymasaoka/items/0b0b726354c3cfd38021



別ブランチ作成⇒コミット
https://qiita.com/takamii228/items/80c0996a0b5fa39337bd
プルリク一連の流れ
https://qiita.com/kuuuuumiiiii/items/42d2d9ed11e3b29c22cf

reactで使えるアイコン集
https://www.radix-ui.com/icons

// lib/azureBlob.ts
import { BlobServiceClient } from '@azure/storage-blob';

const connectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;

export const getBlobServiceClient = () => {
  if (!connectionString) {
    throw new Error('Azureストレージ接続文字列が設定されていません');
  }

  const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);
  return blobServiceClient;
};

// pages/api/getBlobs.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import { getBlobServiceClient } from '../../lib/azureBlob';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    // Blobサービスクライアントを取得
    const blobServiceClient = getBlobServiceClient();
    const containerName = 'your-container-name';  // コンテナ名を指定
    const containerClient = blobServiceClient.getContainerClient(containerName);

    // コンテナ内のBlobをリストアップ
    let blobs: { name: string, url: string }[] = [];
    for await (const blob of containerClient.listBlobsFlat()) {
      blobs.push({
        name: blob.name,
        url: `https://${process.env.AZURE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${containerName}/${blob.name}`
      });
    }

    res.status(200).json(blobs);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Blobの取得に失敗しました' });
  }
}


// pages/index.tsx
import { useEffect, useState } from 'react';

export default function Home() {
  const [blobs, setBlobs] = useState<any[]>([]);

  useEffect(() => {
    const fetchBlobs = async () => {
      const response = await fetch('/api/getBlobs');
      const data = await response.json();
      setBlobs(data);
    };

    fetchBlobs();
  }, []);

  return (
    <div>
      <h1>Azure Blob Storage Files</h1>
      <ul>
        {blobs.map((blob) => (
          <li key={blob.name}>
            <a href={blob.url} target="_blank" rel="noopener noreferrer">
              {blob.name}
            </a>
          </li>
        ))}
      </ul>
    </div>
  );
}


Next.js（TypeScript）とExpress（JavaScript）を使って、フロントエンドからバックエンドにリクエストを送り、SASトークンを生成して返す方法を以下の手順で説明します。

1. Express バックエンドでSASトークンを生成

まず、Azure SDKを使ってSASトークンを生成するため、バックエンドに @azure/storage-blob パッケージをインストールします。

npm install @azure/storage-blob

次に、バックエンドでSASトークンを生成するためのエンドポイントを設定します。

server.js (Express サーバー)

const express = require('express');
const { BlobServiceClient, StorageSharedKeyCredential, generateBlobSASQueryParameters, BlobSASPermissions } = require('@azure/storage-blob');
require('dotenv').config(); // .envファイルにストレージアカウントの情報を保存

const app = express();
const port = 3000;

// ストレージアカウントの情報を環境変数から取得
const accountName = process.env.AZURE_STORAGE_ACCOUNT_NAME;
const accountKey = process.env.AZURE_STORAGE_ACCOUNT_KEY;

app.get('/generate-sas', async (req, res) => {
  try {
    // Azureの認証情報をセット
    const sharedKeyCredential = new StorageSharedKeyCredential(accountName, accountKey);
    
    // SASトークンを生成するためのBlobクライアント
    const blobServiceClient = new BlobServiceClient(
      `https://${accountName}.blob.core.windows.net`,
      sharedKeyCredential
    );

    // コンテナ名やBlob名を指定
    const containerName = req.query.containerName;
    const blobName = req.query.blobName;

    // SASトークンの有効期限と権限を設定
    const permissions = new BlobSASPermissions();
    permissions.read = true;  // 読み取りのみ許可
    permissions.write = true; // 必要に応じて書き込みも許可

    const expiryDate = new Date();
    expiryDate.setMinutes(expiryDate.getMinutes() + 30); // 30分間有効

    // SASパラメータを生成
    const sasToken = generateBlobSASQueryParameters({
      containerName,
      blobName,
      permissions,
      expiresOn: expiryDate
    }, sharedKeyCredential).toString();

    const sasUrl = `https://${accountName}.blob.core.windows.net/${containerName}/${blobName}?${sasToken}`;

    // SAS URLを返す
    res.json({ sasUrl });
  } catch (error) {
    console.error('Error generating SAS token:', error);
    res.status(500).json({ error: 'Failed to generate SAS token' });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

2. 環境変数の設定

Azureストレージアカウントの名前とキーは安全に管理する必要があります。.env ファイルを作成して次のように設定します。

.env

AZURE_STORAGE_ACCOUNT_NAME=your_storage_account_name
AZURE_STORAGE_ACCOUNT_KEY=your_storage_account_key

.gitignore に .env を追加してバージョン管理システムにコミットしないようにします。

3. Next.js フロントエンドからリクエストを送信

次に、Next.js（TypeScript）でフロントエンドからバックエンドにリクエストを送信して、SASトークンを取得します。

pages/index.tsx (Next.js フロントエンド)

import { useState } from 'react';

const Home = () => {
  const [sasUrl, setSasUrl] = useState<string | null>(null);

  const getSasToken = async () => {
    try {
      const response = await fetch(`/api/generate-sas?containerName=your-container&blobName=your-blob`);
      const data = await response.json();
      setSasUrl(data.sasUrl);
    } catch (error) {
      console.error('Error fetching SAS token:', error);
    }
  };

  return (
    <div>
      <h1>Azure Blob SAS Token Example</h1>
      <button onClick={getSasToken}>Get SAS Token</button>
      {sasUrl && (
        <div>
          <p>SAS URL:</p>
          <a href={sasUrl} target="_blank" rel="noopener noreferrer">
            {sasUrl}
          </a>
        </div>
      )}
    </div>
  );
};

export default Home;

4. APIリクエストの設定

Next.js の pages/api ディレクトリに、バックエンドの /generate-sas エンドポイントにリクエストを投げるコードを配置することもできます。

pages/api/generate-sas.ts

import type { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { containerName, blobName } = req.query;

  // バックエンドの Express サーバーにリクエストを送信
  const response = await fetch(`http://localhost:3000/generate-sas?containerName=${containerName}&blobName=${blobName}`);
  const data = await response.json();

  res.status(200).json(data);
}

5. 動作確認

	•	Expressサーバーを起動します。
	•	Next.jsアプリケーションから、Blobに対するSASトークンを取得し、それを使ってAzure Blob Storageにアクセスできるか確認します。

このセットアップにより、Next.jsフロントエンドからSASトークンをリクエストし、Expressバックエンドで生成して返すことができるようになります。


async function streamToBuffer(readableStream: ReadableStream<Uint8Array> | null): Promise<Buffer> {
  if (!readableStream) {
    throw new Error("No stream available");
  }

  const reader = readableStream.getReader();
  const chunks: Uint8Array[] = [];
  let result: ReadableStreamDefaultReadResult<Uint8Array>;

  // ストリームを読み込んで、チャンクを収集
  while (!(result = await reader.read()).done) {
    chunks.push(result.value);
  }

  // Uint8Arrayを結合してBufferを作成
  const totalLength = chunks.reduce((acc, chunk) => acc + chunk.length, 0);
  const buffer = Buffer.concat(chunks.map(chunk => Buffer.from(chunk)), totalLength);

  return buffer;
}



// Blobをダウンロードして文字列に変換する
const downloadBlockBlobResponse = await blobClient.download();
const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);
console.log("Downloaded blob content", downloaded);

// Blobを文字列に変換する関数
async function blobToString(blob: Blob): Promise<string> {
  const fileReader = new FileReader();
  
  return new Promise<string>((resolve, reject) => {
    fileReader.onloadend = (ev: ProgressEvent<FileReader>) => {
      if (ev.target && ev.target.result) {
        resolve(ev.target.result as string);
      } else {
        reject(new Error('Failed to read the Blob'));
      }
    };
    
    fileReader.onerror = reject;
    fileReader.readAsText(blob);
  });
}

blobToString 関数は、FileReader.readAsText() メソッドを使ってBlobを文字列に変換していますが、この方法はテキストデータに対して適しています。画像やPDFのようなバイナリデータを文字列に変換する場合、readAsText() ではなく、readAsDataURL() か readAsArrayBuffer() を使う必要があります。

以下に、それぞれの方法について説明します。

1. 画像やPDFをBase64形式に変換 (Data URL)

画像やPDFなどのバイナリデータをBase64エンコードされた文字列に変換するには、readAsDataURL() を使います。これにより、画像やPDFをData URL形式の文字列に変換できます。

async function blobToDataURL(blob: Blob): Promise<string> {
  const fileReader = new FileReader();
  
  return new Promise<string>((resolve, reject) => {
    fileReader.onloadend = (ev: ProgressEvent<FileReader>) => {
      if (ev.target && ev.target.result) {
        resolve(ev.target.result as string); // Data URL (Base64 encoded string)
      } else {
        reject(new Error('Failed to read the Blob'));
      }
    };
    
    fileReader.onerror = reject;
    fileReader.readAsDataURL(blob); // バイナリデータをBase64エンコードされた文字列に変換
  });
}

2. **画像やPDFをバイナリデ

async function downloadAndDisplayJpegImage(blobClient: BlobClient, imgElementId: string) {
  // Blobをダウンロード
  const downloadBlockBlobResponse = await blobClient.download();

  // BlobをBase64形式に変換
  const base64Data = await blobToBase64(await downloadBlockBlobResponse.blobBody);

  // 取得したBase64データをJPEG画像のsrcに設定
  const imgElement = document.getElementById(imgElementId) as HTMLImageElement;
  if (imgElement) {
    imgElement.src = `data:image/jpeg;base64,${base64Data}`; // JPEG形式の指定
  }
}

async function blobToBase64(blob: Blob): Promise<string> {
  const reader = new FileReader();

  return new Promise<string>((resolve, reject) => {
    reader.onloadend = () => {
      const base64data = reader.result?.toString().split(',')[1]; // Base64データ部分のみ抽出
      resolve(base64data || '');
    };
    reader.onerror = reject;
    reader.readAsDataURL(blob); // BlobをBase64形式に変換
  });
}
// BlobClientを使ってJPEGファイルを指定
const blobClient = containerClient.getBlobClient('example-image.jpeg');

// ダウンロードして表示
await downloadAndDisplayJpegImage(blobClient, 'jpegImage');

はい、Cosmos DB のバルク操作では、Create（インサート）と Replace（更新）を同時に行うことが可能です。それぞれのオブジェクトに対して異なる operationType を指定すれば、一括で登録と更新を同時に行えます。

以下に、登録と更新を同時に行う例を示します。

const { CosmosClient } = require("@azure/cosmos");

const client = new CosmosClient({ endpoint, key });
const database = client.database("your-database-id");
const container = database.container("your-container-id");

async function bulkUpsert(dataArray) {
    const operations = dataArray.map((data) => {
        // 登録（Create）と更新（Replace）を切り分け
        const isNew = !data.id; // IDがない場合は新規登録とする（例）
        return {
            operationType: isNew ? "Create" : "Replace",
            resourceBody: data,
            partitionKey: data.type, // パーティションキーの指定
            id: data.id, // Replace の場合に必要
        };
    });

    const { resources: responses } = await container.items.bulk(operations);
    return responses;
}

// サンプルデータ
const dataArray = [
    { type: "person", name: "Alice", age: 30 }, // IDなし（新規）
    { id: "2", type: "car", brand: "Toyota", model: "Camry", year: 2021 }, // 更新
    { id: "3", type: "product", name: "Laptop", price: 1400, specs: { cpu: "Intel i9", ram: "32GB" } }, // 更新
    // ...more data
];

bulkUpsert(dataArray).then((responses) => {
    console.log("Bulk upsert responses:", responses);
});

注意点

	•	IDの指定: 新規登録の場合は id プロパティを指定しない、もしくはサーバー側で生成させることが一般的です。更新の場合は、既存の id を含めてください。
	•	エラーハンドリング: 登録と更新の操作が混在しているため、エラーの発生も別々に処理するのが理想です。

同一パーティションキー内であれば、Cosmos DB では Transactional Batch 機能を使って、複数の操作を1つのトランザクションとして扱えます。この機能を利用することで、同じパーティションキーを持つ複数のドキュメントに対して、Create（インサート）、Replace（更新）、Delete（削除）などの操作を一括で実行できます。

Transactional Batch の特徴として、すべての操作が成功した場合のみ変更が確定し、いずれかの操作が失敗した場合にはすべての操作がロールバックされます。これにより、データの一貫性を確保できます。

同一パーティションキー内でのトランザクションバッチの実装例

次のコードでは、パーティションキー type: "product" に属する複数のデータを対象に、インサートと更新をトランザクションとしてまとめて実行しています。

const { CosmosClient } = require("@azure/cosmos");

const client = new CosmosClient({ endpoint, key });
const database = client.database("your-database-id");
const container = database.container("your-container-id");

async function executeTransactionalBatch() {
    const partitionKeyValue = "product"; // 同一パーティションキー

    const batch = container.items.createTransactionalBatch(partitionKeyValue);

    // バッチ内に複数の操作を追加
    batch.create({ id: "4", type: "product", name: "Tablet", price: 500 });
    batch.replace({ id: "3", type: "product", name: "Laptop", price: 1300, specs: { cpu: "Intel i9", ram: "32GB" } });

    // トランザクションバッチの実行
    const { resources: responses, statusCode } = await batch.execute();

    if (statusCode >= 200 && statusCode < 300) {
        console.log("Transaction succeeded:", responses);
    } else {
        console.log("Transaction failed. Rolled back.");
    }
}

executeTransactionalBatch().then(() => console.log("Done"));

注意点

	•	同一パーティションキー内のみ: トランザクションバッチは、同一パーティションキー内のドキュメントに対してのみ有効です。異なるパーティションキーのドキュメントがバッチに含まれている場合、エラーになります。
	•	サイズと操作数の制限: トランザクションバッチにはサイズと操作数の制限があり、制限を超えるとエラーが発生します。1バッチで扱える操作数の上限（現在は約100操作）と、サイズ制限（2MB）に注意してください。

Transactional Batch を使うことで、同一パーティションキー内でのデータの一括操作を一貫性を保ちながら実行でき、インサートと更新の同時処理が可能になります。


const { CosmosClient } = require("@azure/cosmos");

const client = new CosmosClient({ endpoint: "YOUR_ENDPOINT", key: "YOUR_KEY" });
const database = client.database("your-database-id");
const container = database.container("your-container-id");

async function executeBatch() {
    const partitionKeyValue = "product"; // 同一パーティションキー

    // バッチ操作の設定
    const operations = [
        { operationType: "Create", resourceBody: { id: "4", type: "product", name: "Tablet", price: 500 } },
        { operationType: "Replace", id: "3", resourceBody: { type: "product", name: "Laptop", price: 1300, specs: { cpu: "Intel i9", ram: "32GB" } } },
    ];

    // バッチ操作の実行
    const { statusCode, result } = await container.items.batch(partitionKeyValue, operations);

    if (statusCode >= 200 && statusCode < 300) {
        console.log("Transaction succeeded:", result);
    } else {
        console.log("Transaction failed. Rolled back.");
    }
}

executeBatch().then(() => console.log("Done")).catch(console.error);





const items = [
  { name: 'item1', type: 'A' },
  { name: 'item2', type: 'B' },
  { name: 'item3', type: 'A' },
  { name: 'item4', type: 'C' }
];

// typeが 'A' のものだけを抽出
const filteredItems = items.filter(item => item.type === 'A');

console.log(filteredItems);





let items1 = [
  { name: 'item1', type: 'A' },
  { name: 'item2', type: 'B' }
];

const items2 = [
  { name: 'item3', type: 'A' },
  { name: 'item4', type: 'C' }
];

// 条件： items1 に type 'A' がある場合に items2 を追加する
if (items1.some(item => item.type === 'A')) {
  items1 = items1.concat(items2); // items1にitems2を追加
}

console.log(items1);





const obj = { name: 'sample' };

// 条件に基づき複数のプロパティをまとめて追加
const additionalProperties = { age: 25, city: 'Tokyo' };

if (condition) {
  Object.assign(obj, additionalProperties);
}

console.log(obj);




Blob から File 型に変換する際には、File のプロパティ name と lastModified が必須です。これらを指定しないと、File インスタンスとして認識されません。

必要なプロパティ

	•	name: ファイルの名前を指定する文字列
	•	lastModified: ファイルの最終更新日時を示すタイムスタンプ（ミリ秒）

変換方法

以下のコードで、Blob から File に変換する際に name と lastModified を指定します。

function blobToFile(blob: Blob, fileName: string): File {
    const lastModified = new Date().getTime(); // 現在時刻を使用する例
    return new File([blob], fileName, { type: blob.type, lastModified });
}

これで、File 型に必要なプロパティが全て指定されるため、TypeScript の型エラーを回避できます。

import React, { useState } from 'react';

function App() {
  const [file, setFile] = useState<File | null>(null);

  // Blob を File に変換して state に保存する関数
  const handleBlobToFile = (blob: Blob) => {
    const fileName = "example.txt";
    const lastModified = new Date().getTime(); // 最終更新日時を現在時刻に設定

    const convertedFile = new File([blob], fileName, { type: blob.type, lastModified });
    setFile(convertedFile);
  };

  return (
    <div>
      <button onClick={() => handleBlobToFile(new Blob(["Hello, world!"], { type: "text/plain" }))}>
        ファイルを作成して保存
      </button>
      {file && <p>ファイル名: {file.name}</p>}
    </div>
  );
}

export default App;

import React, { useState } from 'react';

const MyComponent = () => {
  const [items, setItems] = useState([]);

  // 最新の配列の長さを取得する関数
  const getLatestLength = () => {
    setItems((prevItems) => {
      const length = prevItems.length; // 最新の長さを取得
      console.log("最新の配列の長さ:", length);
      return prevItems; // 状態を変更せずに元の値を返す
    });
  };

  return (
    <div>
      <button onClick={getLatestLength}>Get Latest Length</button>
      <p>Current items count: {items.length}</p>
    </div>
  );
};

export default MyComponent;

const { CosmosClient } = require("@azure/cosmos");

const endpoint = "<Your-CosmosDB-Endpoint>";
const key = "<Your-CosmosDB-Key>";
const databaseId = "<Your-Database-Id>";
const containerId = "<Your-Container-Id>";

const client = new CosmosClient({ endpoint, key });

async function deleteItemsInBatches(idsToDelete) {
  const database = client.database(databaseId);
  const container = database.container(containerId);

  // 100件ごとに分割
  const chunkedIds = [];
  for (let i = 0; i < idsToDelete.length; i += 100) {
    chunkedIds.push(idsToDelete.slice(i, i + 100));
  }

  try {
    for (const ids of chunkedIds) {
      // バッチ操作の作成
      const operations = ids.map(id => ({
        operationType: "Delete",
        id: id,
        partitionKey: id // パーティションキーを指定（必要に応じて変更）
      }));

      // バッチ削除を実行
      const response = await container.items.batch(operations);
      console.log("Batch delete completed with status codes:", response.map(res => res.statusCode));
    }
  } catch (error) {
    console.error("Batch delete failed:", error);
  }
}

// 実行例
const idsToDelete = Array.from({ length: 300 }, (_, i) => `item${i + 1}`); // 300件のID例
deleteItemsInBatches(idsToDelete);

