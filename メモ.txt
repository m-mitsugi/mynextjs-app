# Next.js&Reactメモ

参考

https://zenn.dev/sikkim/books/how_to_create_api_sales_service/viewer/1_front_end_environment

■プロジェクト作成

- react

npm create vite@latest

npm install

- Next.js

npx create-next-app@latest プロジェクト名

■サーバー起動

npm run dev

■tailwindcss

npm i -D tailwindcss postcss autoprefixer

よく使うクラス

https://zenn.dev/yohei_watanabe/books/c0b573713734b9/viewer/cfd413

■デバック設定

https://qiita.com/fsd_maclala/items/5878af09e70258fa2e68

■Next.js初学者

https://qiita.com/yu-Matsu/items/4ebd28d5ecf2fd8acf98

■**Azure Cosmos DB**

node.js⇒cosmosdbへのアクセス方法が載って

https://qiita.com/ymasaoka/items/3784c64baf30bbe7b761

マニュアル

https://learn.microsoft.com/ja-jp/azure/cosmos-db/nosql/quickstart-nodejs?pivots=devcontainer-codespace#get-a-container

DB更新のサンプルコード

https://miyohide.hatenablog.com/entry/2020/09/06/182831

https://learn.microsoft.com/ja-jp/azure/cosmos-db/nosql/samples-nodejs

・cosmosdb利用にあたりNode.js + Express.js + TypeScriptの準備

https://qiita.com/ymasaoka/items/0b0b726354c3cfd38021



別ブランチ作成⇒コミット
https://qiita.com/takamii228/items/80c0996a0b5fa39337bd
プルリク一連の流れ
https://qiita.com/kuuuuumiiiii/items/42d2d9ed11e3b29c22cf

reactで使えるアイコン集
https://www.radix-ui.com/icons

// lib/azureBlob.ts
import { BlobServiceClient } from '@azure/storage-blob';

const connectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;

export const getBlobServiceClient = () => {
  if (!connectionString) {
    throw new Error('Azureストレージ接続文字列が設定されていません');
  }

  const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);
  return blobServiceClient;
};

// pages/api/getBlobs.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import { getBlobServiceClient } from '../../lib/azureBlob';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    // Blobサービスクライアントを取得
    const blobServiceClient = getBlobServiceClient();
    const containerName = 'your-container-name';  // コンテナ名を指定
    const containerClient = blobServiceClient.getContainerClient(containerName);

    // コンテナ内のBlobをリストアップ
    let blobs: { name: string, url: string }[] = [];
    for await (const blob of containerClient.listBlobsFlat()) {
      blobs.push({
        name: blob.name,
        url: `https://${process.env.AZURE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${containerName}/${blob.name}`
      });
    }

    res.status(200).json(blobs);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Blobの取得に失敗しました' });
  }
}


// pages/index.tsx
import { useEffect, useState } from 'react';

export default function Home() {
  const [blobs, setBlobs] = useState<any[]>([]);

  useEffect(() => {
    const fetchBlobs = async () => {
      const response = await fetch('/api/getBlobs');
      const data = await response.json();
      setBlobs(data);
    };

    fetchBlobs();
  }, []);

  return (
    <div>
      <h1>Azure Blob Storage Files</h1>
      <ul>
        {blobs.map((blob) => (
          <li key={blob.name}>
            <a href={blob.url} target="_blank" rel="noopener noreferrer">
              {blob.name}
            </a>
          </li>
        ))}
      </ul>
    </div>
  );
}
