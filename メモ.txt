# Next.js&Reactメモ

参考

https://zenn.dev/sikkim/books/how_to_create_api_sales_service/viewer/1_front_end_environment

■プロジェクト作成

- react

npm create vite@latest

npm install

- Next.js

npx create-next-app@latest プロジェクト名

■サーバー起動

npm run dev

■tailwindcss

npm i -D tailwindcss postcss autoprefixer

よく使うクラス

https://zenn.dev/yohei_watanabe/books/c0b573713734b9/viewer/cfd413

■デバック設定

https://qiita.com/fsd_maclala/items/5878af09e70258fa2e68

■Next.js初学者

https://qiita.com/yu-Matsu/items/4ebd28d5ecf2fd8acf98

■**Azure Cosmos DB**

node.js⇒cosmosdbへのアクセス方法が載って

https://qiita.com/ymasaoka/items/3784c64baf30bbe7b761

マニュアル

https://learn.microsoft.com/ja-jp/azure/cosmos-db/nosql/quickstart-nodejs?pivots=devcontainer-codespace#get-a-container

DB更新のサンプルコード

https://miyohide.hatenablog.com/entry/2020/09/06/182831

https://learn.microsoft.com/ja-jp/azure/cosmos-db/nosql/samples-nodejs

・cosmosdb利用にあたりNode.js + Express.js + TypeScriptの準備

https://qiita.com/ymasaoka/items/0b0b726354c3cfd38021



別ブランチ作成⇒コミット
https://qiita.com/takamii228/items/80c0996a0b5fa39337bd
プルリク一連の流れ
https://qiita.com/kuuuuumiiiii/items/42d2d9ed11e3b29c22cf

reactで使えるアイコン集
https://www.radix-ui.com/icons


// 全角を半角に変換する関数
function toHalfWidth(str) {
  return str.replace(/[Ａ-Ｚａ-ｚ０-９！-～]/g, function(s) {
    return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
  }).replace(/　/g, " ").replace(/[ァ-ヶ]/g, function(s) {
    // 全角カタカナを半角カタカナに
    const katakanaFull = "アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンヴ";
    const katakanaHalf = "ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝｳﾞ";
    const idx = katakanaFull.indexOf(s);
    return idx >= 0 ? katakanaHalf[idx] : s;
  });
}

// 全半角・大文字小文字を区別しない検索を行う関数
function searchList(list, searchTerm) {
  // 検索キーワードとリストの項目を全て半角・小文字に統一
  const normalizedSearchTerm = toHalfWidth(searchTerm).toLowerCase();
  return list.filter(item => toHalfWidth(item).toLowerCase().includes(normalizedSearchTerm));
}

// 検索対象のリスト
const list = [
  "テスト123",
  "ＡＢＣ１２３",
  "テストｱｲｳ123",
  "abc123",
  "ABC123",
  "123",
  "カタカナ",
  "ﾊﾝｶｸｶﾀｶﾅ",
  "Full-width ＡＢＣ"
];

// 検索キーワード
const searchTerm = "abc";

// 検索実行
const result = searchList(list, searchTerm);
console.log(result);

// 全角カタカナを半角カタカナに変換する関数
function toHalfWidthKatakana(str) {
  const katakanaFull = [
    "ガ", "ギ", "グ", "ゲ", "ゴ",
    "ザ", "ジ", "ズ", "ゼ", "ゾ",
    "ダ", "ヂ", "ヅ", "デ", "ド",
    "バ", "ビ", "ブ", "ベ", "ボ",
    "パ", "ピ", "プ", "ペ", "ポ",
    "カ", "キ", "ク", "ケ", "コ",
    "サ", "シ", "ス", "セ", "ソ",
    "タ", "チ", "ツ", "テ", "ト",
    "ナ", "ニ", "ヌ", "ネ", "ノ",
    "ハ", "ヒ", "フ", "ヘ", "ホ",
    "マ", "ミ", "ム", "メ", "モ",
    "ヤ", "ユ", "ヨ", "ラ", "リ", "ル", "レ", "ロ", "ワ", "ヲ", "ン", "ッ", "ァ", "ィ", "ゥ", "ェ", "ォ", "ャ", "ュ", "ョ", "ヴ"
  ];

  const katakanaHalf = [
    "ｶﾞ", "ｷﾞ", "ｸﾞ", "ｹﾞ", "ｺﾞ",
    "ｻﾞ", "ｼﾞ", "ｽﾞ", "ｾﾞ", "ｿﾞ",
    "ﾀﾞ", "ﾁﾞ", "ﾂﾞ", "ﾃﾞ", "ﾄﾞ",
    "ﾊﾞ", "ﾋﾞ", "ﾌﾞ", "ﾍﾞ", "ﾎﾞ",
    "ﾊﾟ", "ﾋﾟ", "ﾌﾟ", "ﾍﾟ", "ﾎﾟ",
    "ｶ", "ｷ", "ｸ", "ｹ", "ｺ",
    "ｻ", "ｼ", "ｽ", "ｾ", "ｿ",
    "ﾀ", "ﾁ", "ﾂ", "ﾃ", "ﾄ",
    "ﾅ", "ﾆ", "ﾇ", "ﾈ", "ﾉ",
    "ﾊ", "ﾋ", "ﾌ", "ﾍ", "ﾎ",
    "ﾏ", "ﾐ", "ﾑ", "ﾒ", "ﾓ",
    "ﾔ", "ﾕ", "ﾖ", "ﾗ", "ﾘ", "ﾙ", "ﾚ", "ﾛ", "ﾜ", "ｦ", "ﾝ", "ｯ", "ｧ", "ｨ", "ｩ", "ｪ", "ｫ", "ｬ", "ｭ", "ｮ", "ｳﾞ"
  ];

  // 全角カタカナを半角に変換
  return str.replace(/[ァ-ヶヴー]/g, function (s) {
    const index = katakanaFull.indexOf(s);
    return index >= 0 ? katakanaHalf[index] : s;
  });
}

// テスト用の文字列
const testString = "ガギグゲゴパピプペポアイウエオッヴァィゥヴ";

// 変換結果を表示
console.log(toHalfWidthKatakana(testString));


const a = [
  { id: 1, name: "Alice" },
  { id: 2, name: "Bob" },
  { id: 3, name: "Charlie" }
];

const b = [
  { id: 1, age: 25, city: "New York" },
  { id: 2, age: 30, city: "London" },
  { id: 4, age: 28, city: "Paris" } // id: 4 は a にはない
];

const merged = a.map(objA => {
  // b 配列の中で objA.id と一致するものを探す
  const objB = b.find(objB => objB.id === objA.id);
  
  // 一致するものがあれば、objA と objB をマージする
  return objB ? { ...objA, ...objB } : objA;
});

console.log(merged);




const a = [
  { id: 1, name: "Alice" },
  { id: 2, name: "Bob" },
  { id: 3, name: "Charlie" }
];

const b = [
  { id: 1, age: 25, city: "New York" },
  { id: 2, age: 30, city: "London" },
  { id: 4, age: 28, city: "Paris" } // id: 4 は a にはない
];

const merged = a
  .map(objA => {
    // b 配列の中で objA.id と一致するものを探す
    const objB = b.find(objB => objB.id === objA.id);
    
    // 一致するものがあれば、objA と objB をマージする
    return objB ? { ...objA, ...objB } : null;
  })
  .filter(obj => obj !== null); // null の要素を除外

console.log(merged);
